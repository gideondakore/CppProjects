#include <algorithm>
#include <iostream>
#include <tuple>  // Include <tuple> for std::tie
#include <vector>
#include <sstream> //stringstream

enum GameState { Rock = 1, Paper, Scissor };

struct Game {
    GameState x, y;

    bool operator<(const Game& other) const {
       int x_ = static_cast<int>(x);
       int y_ = static_cast<int>(y);
       int ox_ = static_cast<int>(other.x);
       int oy_ = static_cast<int>(other.y);
       
       
       std::cout<<"========================="<<std::endl;
     return std::tie(x_, y_) < std::tie(ox_, oy_);
    }
};

int main() {
    Game game{Rock, Paper};
    int num = (static_cast<int>(Rock))*10 + static_cast<int>(Paper);
    std::stringstream ss;
    ss << num;
    std::string s = ss.str();
   
    do {
      std::cout << s << ' ';
      std::array<std::string>
    }while (std::prev_permutation(s.begin(), s.end()));
 
    std::cout << s << '\n';

}

//std::for_each(range.begin(), range.end(), [](auto x){std::cout<<static_cast<int>(x)<<' ';});
/*
//switch(compGuestState){
   //case Rock: std::cout<<"Rock\n"; break;
   //case Paper: std::cout<<"Paper\n"; break;
   //case Scissor: std::cout<<"Scissor\n"; break;
   //default: std::cout<<"Wrong input from computer!!\n";
  //}
*/
